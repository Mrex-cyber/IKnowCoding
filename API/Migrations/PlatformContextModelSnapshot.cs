// <auto-generated />
using System;
using IKnowCoding.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(PlatformContext))]
    partial class PlatformContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.Entities.User.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<int>("UserSettingsId")
                        .HasColumnType("int")
                        .HasColumnName("user_settings_id");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "valik@gmail.com",
                            FeedbackId = 0,
                            FirstName = "Valentyn",
                            LastName = "Riabinchak",
                            Password = "11111111",
                            UserSettingsId = 0
                        },
                        new
                        {
                            Id = 2,
                            Email = "vasylyna@gmail.com",
                            FeedbackId = 0,
                            FirstName = "Vasylyna",
                            LastName = "Leheta",
                            Password = "22222222",
                            UserSettingsId = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "igor@gmail.com",
                            FeedbackId = 0,
                            FirstName = "Igor",
                            LastName = "Zaitsev",
                            Password = "33333333",
                            UserSettingsId = 0
                        },
                        new
                        {
                            Id = 4,
                            Email = "tom@gmail.com",
                            FeedbackId = 0,
                            FirstName = "Tom",
                            LastName = "Bot",
                            Password = "44444444",
                            UserSettingsId = 0
                        },
                        new
                        {
                            Id = 5,
                            Email = "admin@gmail.com",
                            FeedbackId = 0,
                            FirstName = "Mr. Admin",
                            LastName = "Secret Administator",
                            Password = "secretKey911#",
                            UserSettingsId = 0
                        });
                });

            modelBuilder.Entity("DAL.Models.Entities.User.UserSettingsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("access_token");

                    b.Property<DateTime?>("AccessTokenExpireTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("access_token_expire_time");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("is_admin");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpireTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("refresh_token_expire_time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAdmin = true,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsAdmin = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            IsAdmin = false,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            IsAdmin = false,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            IsAdmin = false,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("IKnowCoding.API.Models.DTO.MainPage.FeedbackEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_path");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(6087),
                            ImagePath = "https://t3.ftcdn.net/jpg/02/99/04/20/360_F_299042079_vGBD7wIlSeNl7vOevWHiL93G4koMM967.jpg",
                            Text = "Досить корисний та захоплюючий сайт",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(6725),
                            ImagePath = "https://images.unsplash.com/photo-1499952127939-9bbf5af6c51c?q=80&w=2076&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Text = "Мені подобається випробовувати свої навички",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(6727),
                            ImagePath = "https://st2.depositphotos.com/2931363/6569/i/450/depositphotos_65699901-stock-photo-black-man-keeping-arms-crossed.jpg",
                            Text = "Хотілося б більше тестів",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(6728),
                            ImagePath = "https://images.unsplash.com/photo-1500048993953-d23a436266cf?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Text = "Покращує вміння мислити нестандартно та оцінити свої знання",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(6729),
                            ImagePath = "https://images.unsplash.com/photo-1504593811423-6dd665756598?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Text = "Подобається дизайн сайту, допомагає зосередитися",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.DTO.Main_Page.AchievementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_path");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("source");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(4074),
                            ImagePath = "https://startup-ukraine.foundation/wp-content/uploads/photo_5325816626395855791_y-1.jpg",
                            Source = "https://uk.wikipedia.org/wiki/%D0%A3%D0%BA%D1%80%D0%B0%D1%97%D0%BD%D1%81%D1%8C%D0%BA%D0%B8%D0%B9_%D1%84%D0%BE%D0%BD%D0%B4_%D1%81%D1%82%D0%B0%D1%80%D1%82%D0%B0%D0%BF%D1%96%D0%B2",
                            Text = "Загалом, до початку війни Фонд проінвестував понад 250 українських стартапів на суму більш як $6,4 млн. Було проведено 37 пітч-днів за участі 413 стартапів,[8] а кількість поданих заявок на участь у грантових програмах Фонду перевищила 4,5 тис.",
                            Title = "Перше місце серед стартапів освітньої сфери"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(4727),
                            ImagePath = "https://marketer.ua/wp-content/uploads/2018/01/ua-it-ua.jpg",
                            Source = "https://marketer.ua/ua/top-10-achievements-of-ukrainians-in-the-world-it/",
                            Text = "Створено фонд, який за допомогою цього сайту організовує змагання на проходженні тестів.",
                            Title = "Найбільша кількість донатів на ЗСУ"
                        });
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.AnswerVariantEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRight")
                        .HasColumnType("bit")
                        .HasColumnName("is_right");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerVariants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsRight = true,
                            QuestionId = 1,
                            Text = "1"
                        },
                        new
                        {
                            Id = 2,
                            IsRight = false,
                            QuestionId = 1,
                            Text = "2"
                        },
                        new
                        {
                            Id = 3,
                            IsRight = false,
                            QuestionId = 1,
                            Text = "3"
                        },
                        new
                        {
                            Id = 4,
                            IsRight = false,
                            QuestionId = 1,
                            Text = "4"
                        },
                        new
                        {
                            Id = 5,
                            IsRight = false,
                            QuestionId = 2,
                            Text = "1"
                        },
                        new
                        {
                            Id = 6,
                            IsRight = true,
                            QuestionId = 2,
                            Text = "2"
                        },
                        new
                        {
                            Id = 7,
                            IsRight = false,
                            QuestionId = 2,
                            Text = "3"
                        },
                        new
                        {
                            Id = 8,
                            IsRight = false,
                            QuestionId = 2,
                            Text = "4"
                        },
                        new
                        {
                            Id = 9,
                            IsRight = false,
                            QuestionId = 3,
                            Text = "1"
                        },
                        new
                        {
                            Id = 10,
                            IsRight = false,
                            QuestionId = 3,
                            Text = "2"
                        },
                        new
                        {
                            Id = 11,
                            IsRight = true,
                            QuestionId = 3,
                            Text = "3"
                        },
                        new
                        {
                            Id = 12,
                            IsRight = false,
                            QuestionId = 3,
                            Text = "4"
                        },
                        new
                        {
                            Id = 13,
                            IsRight = true,
                            QuestionId = 4,
                            Text = "1"
                        },
                        new
                        {
                            Id = 14,
                            IsRight = false,
                            QuestionId = 4,
                            Text = "2"
                        },
                        new
                        {
                            Id = 15,
                            IsRight = true,
                            QuestionId = 5,
                            Text = "1"
                        },
                        new
                        {
                            Id = 16,
                            IsRight = false,
                            QuestionId = 5,
                            Text = "2"
                        });
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.QuestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TestId = 1,
                            Text = "Choose 1"
                        },
                        new
                        {
                            Id = 2,
                            TestId = 1,
                            Text = "Choose 2"
                        },
                        new
                        {
                            Id = 3,
                            TestId = 1,
                            Text = "Choose 3"
                        },
                        new
                        {
                            Id = 4,
                            TestId = 2,
                            Text = "Choose 1"
                        },
                        new
                        {
                            Id = 5,
                            TestId = 3,
                            Text = "Choose 1"
                        });
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.Relationships.UserTestResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccessTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("access_time");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit")
                        .HasColumnName("finished");

                    b.Property<DateTime?>("FinishedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("finished_time");

                    b.Property<int>("Result")
                        .HasColumnType("int")
                        .HasColumnName("result");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTestResults");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessTime = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(1040),
                            Finished = false,
                            FinishedTime = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(1406),
                            Result = 4,
                            TestId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccessTime = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(2231),
                            Finished = false,
                            FinishedTime = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(2232),
                            Result = 4,
                            TestId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AccessTime = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(2234),
                            Finished = false,
                            FinishedTime = new DateTime(2024, 5, 23, 0, 25, 37, 374, DateTimeKind.Utc).AddTicks(2234),
                            Result = 0,
                            TestId = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.TestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit")
                        .HasColumnName("is_free");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "C# is a general purpose object-oriented programming language.",
                            ImagePath = "https://miro.medium.com/v2/resize:fit:1400/1*_NVBTVdmjt3Qvq3CZOySXg.png",
                            IsFree = true,
                            Title = "C# Start"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Java is a strongly typed, object-oriented, general-purpose programming language developed by Sun Microsystems.",
                            ImagePath = "https://upload.wikimedia.org/wikipedia/ru/thumb/3/39/Java_logo.svg/1200px-Java_logo.svg.png",
                            IsFree = false,
                            Title = "Java Start"
                        },
                        new
                        {
                            Id = 3,
                            Description = "JavaScript is a multi-paradigm programming language.",
                            ImagePath = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Unofficial_JavaScript_logo_2.svg/1200px-Unofficial_JavaScript_logo_2.svg.png",
                            IsFree = true,
                            Title = "JavaScript Start"
                        },
                        new
                        {
                            Id = 4,
                            Description = "C++ is a compiled, statically typed general-purpose programming language.",
                            ImagePath = "https://upload.wikimedia.org/wikipedia/commons/thumb/1/18/ISO_C%2B%2B_Logo.svg/1200px-ISO_C%2B%2B_Logo.svg.png",
                            IsFree = false,
                            Title = "C++ Start"
                        });
                });

            modelBuilder.Entity("DAL.Models.Entities.User.UserSettingsEntity", b =>
                {
                    b.HasOne("DAL.Models.Entities.User.UserEntity", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("DAL.Models.Entities.User.UserSettingsEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IKnowCoding.API.Models.DTO.MainPage.FeedbackEntity", b =>
                {
                    b.HasOne("DAL.Models.Entities.User.UserEntity", "User")
                        .WithOne("Feedback")
                        .HasForeignKey("IKnowCoding.API.Models.DTO.MainPage.FeedbackEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.AnswerVariantEntity", b =>
                {
                    b.HasOne("IKnowCoding.DAL.Models.Entities.QuestionEntity", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.QuestionEntity", b =>
                {
                    b.HasOne("IKnowCoding.DAL.Models.Entities.TestEntity", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.Relationships.UserTestResultEntity", b =>
                {
                    b.HasOne("IKnowCoding.DAL.Models.Entities.TestEntity", "Test")
                        .WithMany("TestResultEntities")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Entities.User.UserEntity", "User")
                        .WithMany("TestResultEntities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Entities.User.UserEntity", b =>
                {
                    b.Navigation("Feedback")
                        .IsRequired();

                    b.Navigation("TestResultEntities");

                    b.Navigation("UserSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.QuestionEntity", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.TestEntity", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TestResultEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
