// <auto-generated />
using System;
using IKnowCoding.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(PlatformContext))]
    [Migration("20240521074409_TestEditing")]
    partial class TestEditing
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Models.Entities.User.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<int>("UserSettingsId")
                        .HasColumnType("int")
                        .HasColumnName("user_settings_id");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "valik@gmail.com",
                            FeedbackId = 0,
                            FirstName = "Valentyn",
                            LastName = "Riabinchak",
                            Password = "11111111",
                            UserSettingsId = 0
                        },
                        new
                        {
                            Id = 2,
                            Email = "vasylyna@gmail.com",
                            FeedbackId = 0,
                            FirstName = "Vasylyna",
                            LastName = "Leheta",
                            Password = "22222222",
                            UserSettingsId = 0
                        },
                        new
                        {
                            Id = 3,
                            Email = "igor@gmail.com",
                            FeedbackId = 0,
                            FirstName = "Igor",
                            LastName = "Zaitsev",
                            Password = "33333333",
                            UserSettingsId = 0
                        },
                        new
                        {
                            Id = 4,
                            Email = "tom@gmail.com",
                            FeedbackId = 0,
                            FirstName = "Tom",
                            LastName = "Bot",
                            Password = "44444444",
                            UserSettingsId = 0
                        },
                        new
                        {
                            Id = 5,
                            Email = "admin@gmail.com",
                            FeedbackId = 0,
                            FirstName = "Mr. Admin",
                            LastName = "Secret Administator",
                            Password = "secretKey911#",
                            UserSettingsId = 0
                        });
                });

            modelBuilder.Entity("DAL.Models.Entities.User.UserSettingsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("access_token");

                    b.Property<DateTime?>("AccessTokenExpireTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("access_token_expire_time");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("is_admin");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpireTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("refresh_token_expire_time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAdmin = true,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsAdmin = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            IsAdmin = false,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            IsAdmin = false,
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            IsAdmin = false,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("IKnowCoding.API.Models.DTO.MainPage.FeedbackEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_path");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(5049),
                            ImagePath = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.cyberlink.com%2Fblog%2Fphoto-editing-best-software%2F322%2Ffree-photo-editing-app-ios-android&psig=AOvVaw0pa2tBQMFPyU3fgcQ3Zb98&ust=1716362899129000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCIizhJ6cnoYDFQAAAAAdAAAAABAE",
                            Text = "Досить корисний та захоплюючий сайт",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(5345),
                            ImagePath = "https://play.google.com/store/apps/details?id=vsin.t16_funny_photo&hl=ru",
                            Text = "Мені подобається випробовувати свої навички",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(5346),
                            ImagePath = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.cutout.pro%2Fru%2Fpassport-photo-maker&psig=AOvVaw0pa2tBQMFPyU3fgcQ3Zb98&ust=1716362899129000&source=images&cd=vfe&opi=89978449&ved=0CBIQjRxqFwoTCIizhJ6cnoYDFQAAAAAdAAAAABAZ",
                            Text = "Хотілося б більше тестів",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(5347),
                            ImagePath = "https://www.google.com/url?sa=i&url=https%3A%2F%2Funsplash.com%2Fs%2Fphotos%2Fphoto&psig=AOvVaw0pa2tBQMFPyU3fgcQ3Zb98&ust=1716362899129000&source=images&cd=vfe&opi=89978449&ved=0CBIQjRxqFwoTCIizhJ6cnoYDFQAAAAAdAAAAABAe",
                            Text = "Покращує вміння мислити нестандартно та оцінити свої знання",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(5348),
                            ImagePath = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fru.freepik.com%2Fphotos%2Fmale&psig=AOvVaw0pa2tBQMFPyU3fgcQ3Zb98&ust=1716362899129000&source=images&cd=vfe&opi=89978449&ved=0CBIQjRxqFwoTCIizhJ6cnoYDFQAAAAAdAAAAABAn",
                            Text = "Подобається дизайн сайту, допомагає зосередитися",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.DTO.Main_Page.AchievementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_path");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("source");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(4047),
                            ImagePath = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fuk.wikipedia.org%2Fwiki%2F%25D0%25A3%25D0%25BA%25D1%2580%25D0%25B0%25D1%2597%25D0%25BD%25D1%2581%25D1%258C%25D0%25BA%25D0%25B8%25D0%25B9_%25D1%2584%25D0%25BE%25D0%25BD%25D0%25B4_%25D1%2581%25D1%2582%25D0%25B0%25D1%2580%25D1%2582%25D0%25B0%25D0%25BF%25D1%2596%25D0%25B2&psig=AOvVaw27InKEIEqDSyorw2o1gWld&ust=1716363157758000&source=images&cd=vfe&opi=89978449&ved=0CBIQjRxqFwoTCPjJoZSdnoYDFQAAAAAdAAAAABAE",
                            Source = "https://uk.wikipedia.org/wiki/%D0%A3%D0%BA%D1%80%D0%B0%D1%97%D0%BD%D1%81%D1%8C%D0%BA%D0%B8%D0%B9_%D1%84%D0%BE%D0%BD%D0%B4_%D1%81%D1%82%D0%B0%D1%80%D1%82%D0%B0%D0%BF%D1%96%D0%B2",
                            Text = "Загалом, до початку війни Фонд проінвестував понад 250 українських стартапів на суму більш як $6,4 млн. Було проведено 37 пітч-днів за участі 413 стартапів,[8] а кількість поданих заявок на участь у грантових програмах Фонду перевищила 4,5 тис.",
                            Title = "Перше місце серед стартапів освітньої сфери"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(4331),
                            ImagePath = "https://marketer.ua/wp-content/uploads/2018/01/ua-it-ua.jpg",
                            Source = "https://marketer.ua/ua/top-10-achievements-of-ukrainians-in-the-world-it/",
                            Text = "Створено фонд, який за допомогою цього сайту організовує змагання на проходженні тестів.",
                            Title = "Найбільша кількість донатів на ЗСУ"
                        });
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.AnswerVariantEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRight")
                        .HasColumnType("bit")
                        .HasColumnName("is_right");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsRight = true,
                            QuestionId = 1,
                            Text = "1"
                        },
                        new
                        {
                            Id = 2,
                            IsRight = false,
                            QuestionId = 1,
                            Text = "2"
                        },
                        new
                        {
                            Id = 3,
                            IsRight = false,
                            QuestionId = 1,
                            Text = "3"
                        },
                        new
                        {
                            Id = 4,
                            IsRight = false,
                            QuestionId = 1,
                            Text = "4"
                        },
                        new
                        {
                            Id = 5,
                            IsRight = false,
                            QuestionId = 2,
                            Text = "1"
                        },
                        new
                        {
                            Id = 6,
                            IsRight = true,
                            QuestionId = 2,
                            Text = "2"
                        },
                        new
                        {
                            Id = 7,
                            IsRight = false,
                            QuestionId = 2,
                            Text = "3"
                        },
                        new
                        {
                            Id = 8,
                            IsRight = false,
                            QuestionId = 2,
                            Text = "4"
                        },
                        new
                        {
                            Id = 9,
                            IsRight = false,
                            QuestionId = 3,
                            Text = "1"
                        },
                        new
                        {
                            Id = 10,
                            IsRight = false,
                            QuestionId = 3,
                            Text = "2"
                        },
                        new
                        {
                            Id = 11,
                            IsRight = true,
                            QuestionId = 3,
                            Text = "3"
                        },
                        new
                        {
                            Id = 12,
                            IsRight = false,
                            QuestionId = 3,
                            Text = "4"
                        },
                        new
                        {
                            Id = 13,
                            IsRight = true,
                            QuestionId = 4,
                            Text = "1"
                        },
                        new
                        {
                            Id = 14,
                            IsRight = false,
                            QuestionId = 4,
                            Text = "2"
                        },
                        new
                        {
                            Id = 15,
                            IsRight = true,
                            QuestionId = 5,
                            Text = "1"
                        },
                        new
                        {
                            Id = 16,
                            IsRight = false,
                            QuestionId = 5,
                            Text = "2"
                        });
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.QuestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TestId = 1,
                            Text = "Choose 1"
                        },
                        new
                        {
                            Id = 2,
                            TestId = 1,
                            Text = "Choose 2"
                        },
                        new
                        {
                            Id = 3,
                            TestId = 1,
                            Text = "Choose 3"
                        },
                        new
                        {
                            Id = 4,
                            TestId = 2,
                            Text = "Choose 1"
                        },
                        new
                        {
                            Id = 5,
                            TestId = 3,
                            Text = "Choose 1"
                        });
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.Relationships.UserTestResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccessTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("access_time");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit")
                        .HasColumnName("finished");

                    b.Property<DateTime?>("FinishedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("finished_time");

                    b.Property<int>("Result")
                        .HasColumnType("int")
                        .HasColumnName("result");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("rel_user_test_result");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessTime = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(2541),
                            Finished = false,
                            FinishedTime = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(2788),
                            Result = 4,
                            TestId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccessTime = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(3207),
                            Finished = false,
                            FinishedTime = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(3208),
                            Result = 4,
                            TestId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AccessTime = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(3209),
                            Finished = false,
                            FinishedTime = new DateTime(2024, 5, 21, 7, 44, 8, 149, DateTimeKind.Utc).AddTicks(3210),
                            Result = 0,
                            TestId = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.TestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit")
                        .HasColumnName("is_free");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "C# is a general purpose object-oriented programming language.",
                            ImagePath = "https://www.google.com/search?q=C%23&sca_esv=43eb03caa67a0f6e&sca_upv=1&sxsrf=ADLYWIJoqKcw6OTVqHou97WgFSpkqmEQbQ:1716277232890&udm=2&source=iu&ictx=1&vet=1&fir=gZQbcdnsHuxc5M%252CSV5viJQ8DtG9OM%252C_%253BqXUkZmd5lFt_MM%252CiNAPn4lC_T_yMM%252C_%253B2Kmaj5PqBmHWrM%252CBeiW2K2u2fvmZM%252C_%253B8-pBrif-5rpyAM%252CF0mAR88WWVgAQM%252C_%253BdXdOQnz9uXv_sM%252C1KVWf25OylUnwM%252C_%253BDxVJxWX96jfIGM%252C-wqahLbR1n0AIM%252C_&usg=AI4_-kSyhjQIexqGmsu1u6BIHBCenLziQw&sa=X&ved=2ahUKEwj_srX2np6GAxVPBdsEHS2NC9gQ_h16BAhNEAE#vhid=qXUkZmd5lFt_MM&vssid=mosaic",
                            IsFree = true,
                            Title = "C# Start"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Java is a strongly typed, object-oriented, general-purpose programming language developed by Sun Microsystems.",
                            ImagePath = "https://www.google.com/search?q=Java&sca_esv=43eb03caa67a0f6e&sca_upv=1&sxsrf=ADLYWIJ1D9HtUKd6VM5DlelJL4pbRdMvZw:1716277244217&udm=2&source=iu&ictx=1&vet=1&fir=NN61QH37-CcFQM%252CEOIUePLXw300MM%252C_%253BtKNLYSWQnxFEQM%252CIW2FF-kZzRCBcM%252C_%253BvNrB6Xgsh-qD9M%252CgZKYe3cfhIvrfM%252C_%253BysxriJRfDlA6SM%252CfaXP3aHwxEvWwM%252C_%253BNnht0gHh8NGrmM%252CToB8tIqOU4fqPM%252C_%253BopnzypUWs4p2zM%252CmVrDzJavYcWs_M%252C_%253B-AJlmno_2oQ8IM%252CFNngVTtazmcAsM%252C_&usg=AI4_-kTrpKG14iLrKJqIeKF6fVhJYKdbzw&sa=X&ved=2ahUKEwjo0-j7np6GAxW2R_EDHf1TD9kQ_h16BAhWEAE#vhid=tKNLYSWQnxFEQM&vssid=mosaic",
                            IsFree = true,
                            Title = "Java Start"
                        },
                        new
                        {
                            Id = 3,
                            Description = "JavaScript is a multi-paradigm programming language.",
                            ImagePath = "https://www.google.com/search?q=JavaScript&sca_esv=43eb03caa67a0f6e&sca_upv=1&sxsrf=ADLYWIJKvliyznF3RYkw0aaMd8frI51ynw:1716277256928&udm=2&source=iu&ictx=1&vet=1&fir=xJB_tNCymTHzpM%252CCkXirMXvIZwNmM%252C%252Fm%252F02p97%253BYQWDxJeX1LWg4M%252CW5aoOx-wZUSIWM%252C_%253BvcCHgmp2Y4AytM%252CMuUh9a0ML8qQ1M%252C_%253BeTe3Io_lGgha-M%252CJHG7BGUwqN5TmM%252C_%253B7oCMorh4dEqvEM%252CXcBvAFxUP5RQAM%252C_&usg=AI4_-kTPLmX_5Q_jXNvu9UxccqO4zRNY-A&sa=X&ved=2ahUKEwjBtfCBn56GAxX4X_EDHduRAjAQ_B16BAhREAE#vhid=xJB_tNCymTHzpM&vssid=mosaic",
                            IsFree = true,
                            Title = "JavaScript Start"
                        },
                        new
                        {
                            Id = 4,
                            Description = "C++ is a compiled, statically typed general-purpose programming language.",
                            ImagePath = "https://www.google.com/search?q=C%2B%2B&sca_esv=43eb03caa67a0f6e&sca_upv=1&sxsrf=ADLYWIJ3Qx43xPY84d0vEBIgWFToM0BDrw:1716277269526&udm=2&source=iu&ictx=1&vet=1&fir=SQ2M_m2NkVA4LM%252CbnoQF5njVnaw-M%252C%252Fm%252F0jgqg%253B18ihDXkeP5MxSM%252CvC7WIwlIoTbDcM%252C_%253BVLRUwrRK2sNv_M%252Ch2hbD-7nOjcJtM%252C_%253BBTwg5lwPuILAVM%252ChZZqlswFnAK-BM%252C_%253BCpytDU_hs09aPM%252CkIuVc11MwmCb1M%252C_%253BU6aIxu2O7h3Z8M%252CLW6HjFI5driPYM%252C_&usg=AI4_-kS1pt1q7E3h7JTp6WAENC7-vNR6Eg&sa=X&ved=2ahUKEwiQtPGHn56GAxXaBdsEHQe4AJIQ_B16BAhREAE#vhid=SQ2M_m2NkVA4LM&vssid=mosaic",
                            IsFree = false,
                            Title = "C++ Start"
                        });
                });

            modelBuilder.Entity("DAL.Models.Entities.User.UserSettingsEntity", b =>
                {
                    b.HasOne("DAL.Models.Entities.User.UserEntity", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("DAL.Models.Entities.User.UserSettingsEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IKnowCoding.API.Models.DTO.MainPage.FeedbackEntity", b =>
                {
                    b.HasOne("DAL.Models.Entities.User.UserEntity", "User")
                        .WithOne("Feedback")
                        .HasForeignKey("IKnowCoding.API.Models.DTO.MainPage.FeedbackEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.AnswerVariantEntity", b =>
                {
                    b.HasOne("IKnowCoding.DAL.Models.Entities.QuestionEntity", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.QuestionEntity", b =>
                {
                    b.HasOne("IKnowCoding.DAL.Models.Entities.TestEntity", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.Relationships.UserTestResultEntity", b =>
                {
                    b.HasOne("IKnowCoding.DAL.Models.Entities.TestEntity", "Test")
                        .WithMany("TestResultEntities")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DAL.Models.Entities.User.UserEntity", "User")
                        .WithMany("TestResultEntities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.Entities.User.UserEntity", b =>
                {
                    b.Navigation("Feedback")
                        .IsRequired();

                    b.Navigation("TestResultEntities");

                    b.Navigation("UserSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.QuestionEntity", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("IKnowCoding.DAL.Models.Entities.TestEntity", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TestResultEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
